#!/bin/bash

set -euo pipefail

basedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

# shellcheck source=/dev/null
. "$basedir/lib/shared.bash"

extract_repo_info() {
  local repo_url="$BUILDKITE_REPO"
  echo "$repo_url" | sed -E 's#.*github\.com[/:]([^/]+)/([^/.]+)(\.git)?$#\1/\2#'
}

retry() {
  local retries=$1; shift
  local attempts=1
  local status=0

  until "$@"; do
    status=$?
    echo "Exited with $status" >&2
    if (( retries == 0 )); then
      return $status
    elif (( attempts == retries )); then
      echo "Failed $attempts retries" >&2
      return $status
    else
      echo "Retrying $((retries - attempts)) more times..." >&2
      attempts=$((attempts + 1))
      sleep $((2 ** (attempts - 2)))
    fi
  done
}

resolve_ref() {
  local ref="$1"
  local repo="$2"
  local token="$3"

  retry 3 curl -sSfL \
    -H "Authorization: Bearer $token" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/repos/$repo/commits/$ref" | jq -r '.sha'
}

list_files() {
  local path="$1"
  local repo="$2"
  local ref="$3"
  local token="$4"

  retry 3 curl -sSfL \
    -H "Authorization: Bearer $token" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/repos/$repo/contents/$path?ref=$ref"
}

download_file() {
  local file="$1"
  local repo="$2"
  local ref="$3"
  local token="$4"

  retry 3 curl -sSfL \
    -H "Authorization: Bearer $token" \
    -H "Accept: application/vnd.github.v3.raw" \
    "https://api.github.com/repos/$repo/contents/$file?ref=$ref" \
    --create-dirs \
    -o "$file"
}

expand_pattern() {
  local pattern="$1"
  local repo="$2"
  local ref="$3"
  local token="$4"

  if [[ "$pattern" != *"/*" ]]; then
    echo "$pattern"
    return
  fi

  local dir="${pattern%/*}"

  local response
  if ! response=$(list_files "$dir" "$repo" "$ref" "$token"); then
    return 1
  fi

  echo "$response" | jq -r '.[] | select(.type == "file") | .path'
}

main() {
  local repo
  repo=$(extract_repo_info)

  if [[ -z "${GITHUB_TOKEN:-}" ]]; then
    echo "Error: GITHUB_TOKEN is required"
    exit 1
  fi

  local ref="${BUILDKITE_COMMIT:-HEAD}"

  if [[ "$ref" == "HEAD" || "$ref" == "head" ]]; then
    echo "Resolving branch ref '$BUILDKITE_BRANCH'..."
    if ! ref=$(resolve_ref "$BUILDKITE_BRANCH" "$repo" "$GITHUB_TOKEN"); then
      echo "Error: Failed to resolve ref '$BUILDKITE_BRANCH' for repo '$repo'" >&2
      exit 1
    fi
    export BUILDKITE_COMMIT="$ref"
    echo "Resolved to commit $ref"
  fi

  echo "BUILDKITE_COMMIT is set to $BUILDKITE_COMMIT"

  local patterns
  patterns=$(plugin_read_list FILE)

  while IFS= read -r pattern; do
    [[ -z "$pattern" ]] && continue

    echo "Resolving file patterns $pattern..."

    local files
    if ! files=$(expand_pattern "$pattern" "$repo" "$BUILDKITE_COMMIT" "$GITHUB_TOKEN"); then
      echo "Error: Failed to list files for pattern '$pattern'" >&2
      exit 1
    fi

    while IFS= read -r file; do
      [[ -z "$file" ]] && continue

      echo "Downloading $file..."

      if ! download_file "$file" "$repo" "$ref" "$GITHUB_TOKEN"; then
        echo "Error: Failed to download file '$file'" >&2
        exit 1
      fi

      echo "Downloaded $file."
    done <<< "$files"
  done <<< "$patterns"
}

main